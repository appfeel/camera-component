/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CamMode } from "./components/camera-component/types";
import { CamOrientation } from "./utils/webcam.types";
export namespace Components {
    interface CameraComponent {
        /**
          * If true, allows taking picture from gallery
         */
        "allowGallery": boolean;
        /**
          * If true, stops cam when back button is pushed
         */
        "backButtonStopCam": boolean;
        /**
          * Camera mode
         */
        "camMode"?: CamMode;
        /**
          * Camera selected - user: front camera - environtment: back camera
         */
        "orientation": CamOrientation;
        /**
          * If true, shows image preview when snap
         */
        "showPreview": boolean;
        /**
          * Method to open the camera
          * @param camMode Defaults to embedded
         */
        "start": (camMode?: CamMode) => Promise<void>;
        "stop": () => Promise<void>;
    }
    interface CameraController {
        /**
          * If true, allows taking picture from gallery
         */
        "allowGallery": boolean;
        /**
          * If true, stops cam when back button is pushed
         */
        "backButtonStopCam": boolean;
        /**
          * Camera mode
         */
        "camMode": CamMode;
        /**
          * Switch between front and back cam
         */
        "flipCam": () => Promise<void>;
        /**
          * Video element height
         */
        "height": number;
        /**
          * Camera selected - user: front camera - environtment: back camera
         */
        "orientation": CamOrientation;
        /**
          * If true, shows image preview when snap
         */
        "showPreview": boolean;
        /**
          * Stop the webcam Emits webcamStop event
         */
        "stopWebcam": () => Promise<void>;
        /**
          * Captures the picture Emits picture event
         */
        "takePicture": () => Promise<void>;
        /**
          * Video element width
         */
        "width": number;
    }
}
declare global {
    interface HTMLCameraComponentElement extends Components.CameraComponent, HTMLStencilElement {
    }
    var HTMLCameraComponentElement: {
        prototype: HTMLCameraComponentElement;
        new (): HTMLCameraComponentElement;
    };
    interface HTMLCameraControllerElement extends Components.CameraController, HTMLStencilElement {
    }
    var HTMLCameraControllerElement: {
        prototype: HTMLCameraControllerElement;
        new (): HTMLCameraControllerElement;
    };
    interface HTMLElementTagNameMap {
        "camera-component": HTMLCameraComponentElement;
        "camera-controller": HTMLCameraControllerElement;
    }
}
declare namespace LocalJSX {
    interface CameraComponent {
        /**
          * If true, allows taking picture from gallery
         */
        "allowGallery"?: boolean;
        /**
          * If true, stops cam when back button is pushed
         */
        "backButtonStopCam"?: boolean;
        /**
          * Camera mode
         */
        "camMode"?: CamMode;
        /**
          * Event emitted when back button is pushed
         */
        "onBackButton"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted when snap
         */
        "onPicture"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when cam stop
         */
        "onWebcamStop"?: (event: CustomEvent<any>) => void;
        /**
          * Camera selected - user: front camera - environtment: back camera
         */
        "orientation"?: CamOrientation;
        /**
          * If true, shows image preview when snap
         */
        "showPreview"?: boolean;
    }
    interface CameraController {
        /**
          * If true, allows taking picture from gallery
         */
        "allowGallery"?: boolean;
        /**
          * If true, stops cam when back button is pushed
         */
        "backButtonStopCam"?: boolean;
        /**
          * Camera mode
         */
        "camMode"?: CamMode;
        /**
          * Video element height
         */
        "height"?: number;
        /**
          * Event emitted when back button is pushed
         */
        "onBackButton"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted when snap
         */
        "onPicture"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when cam is stoped
         */
        "onWebcamStop"?: (event: CustomEvent<any>) => void;
        /**
          * Camera selected - user: front camera - environtment: back camera
         */
        "orientation"?: CamOrientation;
        /**
          * If true, shows image preview when snap
         */
        "showPreview"?: boolean;
        /**
          * Video element width
         */
        "width"?: number;
    }
    interface IntrinsicElements {
        "camera-component": CameraComponent;
        "camera-controller": CameraController;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "camera-component": LocalJSX.CameraComponent & JSXBase.HTMLAttributes<HTMLCameraComponentElement>;
            "camera-controller": LocalJSX.CameraController & JSXBase.HTMLAttributes<HTMLCameraControllerElement>;
        }
    }
}
